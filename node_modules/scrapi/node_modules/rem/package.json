{
  "name": "rem",
  "description": "REST made easy. Extensible, and includes support for many popular APIs.",
  "version": "0.5.15",
  "author": {
    "name": "Tim Cameron Ryan",
    "email": "tim@timryan.org"
  },
  "contributors": [],
  "dependencies": {
    "express": "2.5.8",
    "oauth": "0.9.6",
    "tough-cookie": "0.9.8",
    "read": "0.1.0",
    "nconf": "0.6.0",
    "osenv": "0.0.3",
    "cli-color": "~0.1.7",
    "async": "~0.1.22",
    "open": "0.0.2"
  },
  "bin": {
    "rem": "src/cli.js"
  },
  "main": "./src/rem.js",
  "keywords": [
    "rem",
    "javascript",
    "rest",
    "api",
    "facebook",
    "dropbox",
    "twitter"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/timcameronryan/rem-node.git"
  },
  "readme": "# REM. REST easy.\n\nREM is a REST library that does away with excessive configuration,\nconfusing authentication, and incomplete libraries. Whether using an existing\nAPI or writing your own, REM is the fewest lines of code between\nreading documentation and getting started. And with support for\npopular services built-in, you might never need another web service library.\n\nTo use REM with Node.js, install using `npm`:\n\n    npm install rem\n\nAnd dive right into an API example, with authentication, in just 7 lines:\n\n```javascript\nvar rem = require('rem');\nvar gh = rem.load('github', 3.0).prompt();\n\nrem.console(gh, {scope: [\"user\", \"repo\"]}, function (err, user) {\n  user('user').get(function (err, profile) {\n    console.log(profile);\n  });\n});\n```\n\n## Examples\n\nREM has examples for authentication and for [each builtin API service.](https://github.com/tcr/rem-js/tree/master/examples) These examples can be run from the command line:\n\n    node examples/services/dropbox.js\n\n## Usage\n\nREM lets you define an API according to [a JSON schema](https://github.com/tcr/rem-schema):\n\n```javascript\nvar yourapi = rem.create({\n  base: 'http://your.api/v1',\n  ...\n}, {\n  format: 'json'\n});\n```\n\nREM also includes [configurations for builtin APIs](https://github.com/tcr/rem-schema/builtin).\nGetting started with an API is as simple is specifying the name and its version:\n\n```javascript\nvar rem = require('rem')\nvar tw = rem.load('twitter', 1.1, {\n  key: 'YOUR_API_KEY',\n  secret: 'YOUR_DEEPEST_DARKEST_API_SECRET'\n});\n// Get started with version 1.1 of the Twitter API\n```\n\nYou can make API requests simply:\n\n```javascript\ntw('search').get({q: 'fleetwood mac', rpp: 5}, function(err, json) {\n    console.log('There are', json.results.length, 'results for Fleetwood Mac. #awesome');\n});\n```\n\nOAuth authentication parameters are already included. You can authenticate by using callbacks,\nconnect middleware, or out-of-band modes when available:\n\n```javascript\nvar read = require('read');\nvar oauth = rem.oauth(tw);\ntw.start(function (url, token, secret) {\n    console.log(\"Visit:\", url);\n    read({prompt: \"Verification code: \"}, function (err, verifier) {\n        oauth.complete(verifier, token, secret, function (err, user) {\n            // Authenticated calls with the Twitter API can now be made:\n            user('statuses/update').post({status: message}, function (err, json) {\n            \tconsole.log('Posted a comment:', err, json);\n            })\n        })\n    })\n})\n```\n\nIf you're writing a console script, all it takes is one call for any type of authentication,\n`rem.console`. Also, instead of specifying API keys and secrets, you can use `api.prompt()`\nto ask for them when you run a command. Writing command-line scripts becomes a piece of cake:\n\n```javascript\nvar rem = require('rem');\nvar gh = rem.load('github', 3.0).prompt();\n\nrem.console(gh, {scope: [\"user\", \"repo\"]}, function (err, user) {\n  user('user').get(function (err, profile) {\n    console.log(profile);\n  });\n});\n```\n\n## Reference\n\n### `rem` module\n\n   * #### rem.load(_id_, _version_, _options_) returns `Api`  \n     Load a predefined manifest. The [available list exists in the `rem` repo](https://github.com/timcameronryan/rem). A version parameter is required for each API. The `options` object is a map of values that configure the API, most commonly `key` and `secret`. You can also specify a `format` parameter with the value `\"xml\"` or `\"json\"`, which determines what format to use for REST calls. When a format is not specified, `\"json\"` is assumed.\n     \n   * #### rem.create(_manifest_, _options_) returns `Api`  \n     Create a REM `Api` object using the JSON manifest you supply. The [format of manifests](https://github.com/timcameronryan/rem) is defined in the `rem` repo.\n\n### `Api` object\n\nThe `Api` object is callable:\n\n   * #### api(_path_[, _params_]) returns `Route`  \n     Returns a route object for the given path, and if specified, query parameters. These parameters can be augmented by method calls, for instance `api('/some/path', {\"key1\": \"A\"}).get({\"key2\": \"B\"}, function () { ... })` uses both `key1` and `key2`.\n\n### `Route` object\n\nAll route methods perform a REST call. Each takes a _callback_ parameter (which can be omitted, for instance to just return the ClientRequest object). The callback receives an `err` argument, a `data` object (which will be a JSON object or a `libxmljs` document), and a `RESTCall` object with additional methods and properties.\n\n   * #### route.get([_params_, ]_callback(err, data, call)_) returns `ClientRequest`  \n     Performs a GET request on the given route. Additional query parameters can be specified.\n\n   * #### route.post([_mime_, ]_data_, _callback(err, data, call)_) returns `ClientRequest`  \n     Performs a POST request on the given route with the `data` argument, which can be a string, buffer, or object. The `mime` argument can be a MIME type or one of `form` or `json`. If the `mime` argument is omitted, the value is either  `uploadFormat` as defined in the manifest, or `form` by default. If an object is passed as the `data` argument, it will be serialized as either form data or JSON, depending on the MIME type.\n\n   * #### route.post([_mime_, ]_data_, _callback(err, data, call)_) returns `ClientRequest`  \n     Performs a PUT request on the given route. See `route.post()`\n\n   * #### route.head(_callback(err, data, call)_) returns `ClientRequest`  \n     Performs a HEAD request on the given route. The `data` argument in the callback will be empty. (The `ClientResponse` is saved in the `call.res` parameter.)\n\n   * #### route.del([_mime_, ]_data_, _callback(err, data, call)_) returns `ClientRequest`  \n     Performs a DELETE request on the given route.\n\n### `Auth` object\n\nTODO. See the examples/auth folder.\n\n## License\n\nMIT.",
  "readmeFilename": "README.md",
  "_id": "rem@0.5.15",
  "dist": {
    "shasum": "475645eafc8e5eda9b9433ce060ce2f7f000a92c"
  },
  "_from": "rem@~0.5.11",
  "_resolved": "https://registry.npmjs.org/rem/-/rem-0.5.15.tgz"
}
